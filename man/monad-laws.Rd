% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/monad-laws.R
\name{monad-laws}
\alias{monad-laws}
\alias{expect_holds_left_identity}
\alias{expect_holds_right_identity}
\alias{expect_holds_associativity}
\title{Monad Laws}
\usage{
expect_holds_left_identity(pure, h, a)

expect_holds_right_identity(pure, m)

expect_holds_associativity(h, g, m)
}
\arguments{
\item{pure}{The function to wrap a value in the monad.}

\item{h, g}{Functions that return monadic objects.}

\item{a}{Any object.}

\item{m}{A monadic object.}
}
\description{
Classes implementing \code{\link[=bind]{bind()}} or \code{\link[=join]{join()}} are expected to satisfy three monad
laws. \code{testthat} expectations are provided to check that the laws hold.
}
\details{
The Haskell monad laws have been translated into R as follows:

\describe{
\item{Left identity:}{\code{pure(a) \%>-\% h} is equal to \code{h(a)}.}
\item{Right identity:}{\code{m \%>-\% pure} is equal to \code{m}.}
\item{Associativity:}{\code{(m \%>-\% g) \%>-\% h} is equal to \verb{m \%>-\% \\(x) g(x) \%>-\% h}.}
}
}
\references{
\url{https://wiki.haskell.org/Monad_laws}
}
\seealso{
Other implementation laws: 
\code{\link{functor-laws}}
}
\concept{implementation laws}

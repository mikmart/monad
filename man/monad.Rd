% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/monad.R
\name{monad}
\alias{monad}
\alias{\%>>\%}
\alias{\%>-\%}
\alias{fmap}
\alias{bind}
\alias{join}
\title{Monad Operators and Generics}
\usage{
lhs \%>>\% rhs

lhs \%>-\% rhs

fmap(m, f, ...)

bind(m, f, ...)

join(m)
}
\arguments{
\item{m, lhs}{A monadic object.}

\item{f, rhs}{A function. For \code{bind()}, it should return a monadic object.}

\item{...}{Additional arguments passed to \code{f}.}
}
\description{
Classes implementing methods for these S7 generics are called monads. Methods
should be implemented such that the \link[=monad-laws]{monad laws} hold.
\verb{\%>>\%} is the \code{fmap()} pipe operator, and \verb{\%>-\%} is the \code{bind()} pipe
operator. Operator usage is in the form \code{m \%>>\% f(...)}.
}
\section{Details}{


Monads are containers for values. \code{fmap()} transforms the contained value
with a function. \code{bind()} transforms the contained value with a function
that returns a monadic object. \code{join()} takes a monad whose contained value
is another monad, and combines them into a new monadic object. It is used
to unwrap a layer of monadic structure. Implementing classes typically
embed some form of control flow or state management in \code{bind()} or
\code{join()}.

There is a default implementation for \code{join()} if you provide \code{bind()}, and
a default implementation for \code{bind()} if you provide \code{join()} and \code{fmap()}.
For performance reasons you may wish to implement both regardless.
}

\section{Operators}{


The pipe operators expect a monadic object as \code{lhs} and a call expression
or a function as \code{rhs}. The pipe expression is transformed into a call to
the corresponding monad generic with arguments to the call in \code{rhs} passed
as additional arguments \code{...} to \code{f} in the generic. For example, \code{m \%>>\% f(x)} is equivalent to \code{fmap(m, f, x)} and \code{m \%>-\% f(x)} is equivalent to
\code{bind(m, f, x)}.
}

\section{Trivia}{


A class that only implements \code{fmap()} is called a functor.
}

\seealso{
The \link[=monad-laws]{monad laws} that implementations should
satisfy.
}

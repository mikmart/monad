[{"path":"https://mikmart.github.io/monad/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 monad authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mikmart.github.io/monad/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mikko Marttila. Author, maintainer.","code":""},{"path":"https://mikmart.github.io/monad/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marttila M (2023). monad: Monad Operators Generics. R package version 0.0.0.9000,  https://mikmart.github.io/monad/, https://github.com/mikmart/monad.","code":"@Manual{,   title = {monad: Monad Operators and Generics},   author = {Mikko Marttila},   year = {2023},   note = {R package version 0.0.0.9000,  https://mikmart.github.io/monad/},   url = {https://github.com/mikmart/monad}, }"},{"path":"https://mikmart.github.io/monad/index.html","id":"monad","dir":"","previous_headings":"","what":"Monad Operators and Generics","title":"Monad Operators and Generics","text":"monad provides S7 generic operators monadic classes. Features include: fmap(), bind() join() S7 generic functions. %>>% %>-% pipe operators fmap() bind() respectively. testthat expectations functor monad laws. Implementations generics maybe package. Implementing classes must provide fmap() either bind() join(), method implementations must satisfy functor monad laws.","code":""},{"path":"https://mikmart.github.io/monad/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Monad Operators and Generics","text":"Install GitHub :","code":"# install.packages(\"pak\") pak::pak(\"mikmart/monad\")"},{"path":"https://mikmart.github.io/monad/reference/functor-laws.html","id":null,"dir":"Reference","previous_headings":"","what":"Functor Laws — functor-laws","title":"Functor Laws — functor-laws","text":"Classes implementing fmap() expected satisfy two functor laws. Functions test laws hold provided use testthat package.","code":""},{"path":"https://mikmart.github.io/monad/reference/functor-laws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functor Laws — functor-laws","text":"","code":"expect_holds_preserve_identity(m)  expect_holds_preserve_composition(f, g, m)"},{"path":"https://mikmart.github.io/monad/reference/functor-laws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functor Laws — functor-laws","text":"m functor object. f, g Functions.","code":""},{"path":"https://mikmart.github.io/monad/reference/functor-laws.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functor Laws — functor-laws","text":"Haskell functor laws translated R expectations follows: Preservation identity: m %>>% identity equal m |> identity(). Preservation composition: m %>>% (f %.% g) equal m %>>% g %>>% f. %.% denotes function composition.","code":""},{"path":"https://mikmart.github.io/monad/reference/functor-laws.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Functor Laws — functor-laws","text":"https://wiki.haskell.org/Functor#Functor_Laws","code":""},{"path":[]},{"path":"https://mikmart.github.io/monad/reference/maybe.html","id":null,"dir":"Reference","previous_headings":"","what":"The Maybe Monad — maybe","title":"The Maybe Monad — maybe","text":"package maybe implements Maybe monad. method implementations fmap(), bind() join() provided maybe S3 class package. methods simple wrappers corresponding functions maybe.","code":""},{"path":[]},{"path":"https://mikmart.github.io/monad/reference/maybe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Maybe Monad — maybe","text":"","code":"# The fmap operator corresponds to maybe::maybe_map(). maybe::just(1) %>>% `+`(1) #> Just #> [1] 2 maybe::nothing() %>>% `+`(1) #> Nothing  # The bind operator corresponds to maybe::and_then(). maybe::just(1) %>-% \\(x) maybe::nothing() #> Nothing maybe::nothing() %>-% \\(x) maybe::just(1) #> Nothing"},{"path":"https://mikmart.github.io/monad/reference/monad-laws.html","id":null,"dir":"Reference","previous_headings":"","what":"Monad Laws — monad-laws","title":"Monad Laws — monad-laws","text":"Classes implementing bind() join() expected satisfy three monad laws. Functions test laws hold provided use testthat package.","code":""},{"path":"https://mikmart.github.io/monad/reference/monad-laws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monad Laws — monad-laws","text":"","code":"expect_holds_left_identity(pure, h, a)  expect_holds_right_identity(pure, m)  expect_holds_associativity(h, g, m)"},{"path":"https://mikmart.github.io/monad/reference/monad-laws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monad Laws — monad-laws","text":"pure function wrap value monad. h, g Functions return monadic objects. object. m monadic object.","code":""},{"path":"https://mikmart.github.io/monad/reference/monad-laws.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monad Laws — monad-laws","text":"Haskell monad laws translated R expectations follows: Left identity: pure() %>-% h equal h(). Right identity: m %>-% pure equal m. Associativity: (m %>-% g) %>-% h equal m %>-% \\(x) g(x) %>-% h.","code":""},{"path":"https://mikmart.github.io/monad/reference/monad-laws.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monad Laws — monad-laws","text":"https://wiki.haskell.org/Monad_laws","code":""},{"path":[]},{"path":"https://mikmart.github.io/monad/reference/monad.html","id":null,"dir":"Reference","previous_headings":"","what":"Monad Operators and Generics — monad","title":"Monad Operators and Generics — monad","text":"Classes implementing methods S7 generics called monads. fmap() implemented functors laws hold. bind() join() implemented monad laws hold. %>>% fmap() pipe operator, %>-% bind() pipe operator. Operator usage form m %>>% f(...).","code":""},{"path":"https://mikmart.github.io/monad/reference/monad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monad Operators and Generics — monad","text":"","code":"lhs %>>% rhs  lhs %>-% rhs  fmap(m, f, ...)  bind(m, f, ...)  join(m)"},{"path":"https://mikmart.github.io/monad/reference/monad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monad Operators and Generics — monad","text":"m, lhs monadic object. f, rhs function. bind(), return monadic object. ... Additional arguments passed f.","code":""},{"path":"https://mikmart.github.io/monad/reference/monad.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monad Operators and Generics — monad","text":"Monads containers values. fmap() transforms contained value function. bind() transforms contained value function returns monadic object. join() takes monad whose contained value another monad, combines new monadic object. used unwrap layer monadic structure. Implementing classes typically embed form control flow state management bind() join(). default implementation join() provide bind(), default implementation bind() provide join() fmap(). performance reasons may wish implement regardless.","code":""},{"path":"https://mikmart.github.io/monad/reference/monad.html","id":"operators","dir":"Reference","previous_headings":"","what":"Operators","title":"Monad Operators and Generics — monad","text":"pipe operators expect monadic object lhs call expression function rhs. pipe expression transformed call corresponding monad generic arguments call rhs passed additional arguments ... f generic. example, m %>>% f(x) equivalent fmap(m, f, x) m %>-% f(x) equivalent bind(m, f, x).","code":""},{"path":"https://mikmart.github.io/monad/reference/monad.html","id":"trivia","dir":"Reference","previous_headings":"","what":"Trivia","title":"Monad Operators and Generics — monad","text":"class implements fmap() called functor.","code":""},{"path":[]}]

[{"path":"https://mikmart.github.io/monad/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 monad authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mikmart.github.io/monad/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mikko Marttila. Author, maintainer.","code":""},{"path":"https://mikmart.github.io/monad/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marttila M (2024). monad: Operators Generics Monads. R package version 0.1.1, https://mikmart.github.io/monad/, https://github.com/mikmart/monad.","code":"@Manual{,   title = {monad: Operators and Generics for Monads},   author = {Mikko Marttila},   year = {2024},   note = {R package version 0.1.1, https://mikmart.github.io/monad/},   url = {https://github.com/mikmart/monad}, }"},{"path":"https://mikmart.github.io/monad/index.html","id":"monad","dir":"","previous_headings":"","what":"Operators and Generics for Monads","title":"Operators and Generics for Monads","text":"monad package provides generics generic operators monadic classes. : fmap(), bind() join() S7 generic functions. %>>% %>-% pipe operators fmap() bind() respectively. Implementations generics provided : list built-type via purrr. See ?List. maybe S3 class maybe. See ?Maybe. Implementing classes must provide fmap() either bind() join(). Method implementations must satisfy ?\"functor-laws\" ?\"monad-laws\". concepts modelled directly Monad typeclass functional programming language Haskell. Operator names calling conventions adapted fit R.","code":""},{"path":"https://mikmart.github.io/monad/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Operators and Generics for Monads","text":"Install current release CRAN: development version GitHub:","code":"install.packages(\"monad\") # install.packages(\"pak\") pak::pak(\"mikmart/monad\")"},{"path":"https://mikmart.github.io/monad/reference/functor-laws.html","id":null,"dir":"Reference","previous_headings":"","what":"Functor Laws — functor-laws","title":"Functor Laws — functor-laws","text":"Classes implementing fmap() expected satisfy two functor laws: preservation identity preservation composition.","code":""},{"path":"https://mikmart.github.io/monad/reference/functor-laws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functor Laws — functor-laws","text":"m functor object. f, g Functions.","code":""},{"path":"https://mikmart.github.io/monad/reference/functor-laws.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functor Laws — functor-laws","text":"Haskell functor laws can translated R follows: Preservation identity: m %>>% identity equal m |> identity(). Preservation composition: m %>>% (f %.% g) equal m %>>% g %>>% f. %.% denotes function composition \\(f, g) \\(x) f(g(x)).","code":""},{"path":"https://mikmart.github.io/monad/reference/functor-laws.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Functor Laws — functor-laws","text":"https://wiki.haskell.org/Functor#Functor_Laws","code":""},{"path":[]},{"path":"https://mikmart.github.io/monad/reference/list.html","id":null,"dir":"Reference","previous_headings":"","what":"The List Monad — List","title":"The List Monad — List","text":"list built-type monad element-wise function application fmap() flattening join(). follows %>>% map operator %>-% \"flat map\" operator. methods implemented wrappers purrr package.","code":""},{"path":[]},{"path":"https://mikmart.github.io/monad/reference/list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The List Monad — List","text":"","code":"# The fmap operator corresponds to purrr::map(). list(1, 2) %>>% `+`(1) #> [[1]] #> [1] 2 #>  #> [[2]] #> [1] 3 #>   # The bind operator is a \"flat map\" that combines output lists. list(1, 2) %>-% \\(x) list(x * 2, x / 2) #> [[1]] #> [1] 2 #>  #> [[2]] #> [1] 0.5 #>  #> [[3]] #> [1] 4 #>  #> [[4]] #> [1] 1 #>"},{"path":"https://mikmart.github.io/monad/reference/maybe.html","id":null,"dir":"Reference","previous_headings":"","what":"The Maybe Monad — Maybe","title":"The Maybe Monad — Maybe","text":"maybe package implements Maybe monad. represents explicit possiblity absence value. Methods fmap(), bind() join() provided maybe S3 class wrappers functions package.","code":""},{"path":[]},{"path":"https://mikmart.github.io/monad/reference/maybe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Maybe Monad — Maybe","text":"","code":"# The fmap operator corresponds to maybe::maybe_map(). maybe::just(1) %>>% `+`(1) #> Just #> [1] 2 maybe::nothing() %>>% `+`(1) #> Nothing  # The bind operator corresponds to maybe::and_then(). maybe::just(1) %>-% \\(x) maybe::just(x + 1) #> Just #> [1] 2 maybe::just(1) %>-% \\(x) maybe::nothing() #> Nothing maybe::nothing() %>-% \\(x) maybe::just(1) #> Nothing"},{"path":"https://mikmart.github.io/monad/reference/monad-laws.html","id":null,"dir":"Reference","previous_headings":"","what":"Monad Laws — monad-laws","title":"Monad Laws — monad-laws","text":"Classes implementing bind() expected satisfy three monad laws: left identity, right identity, associativity.","code":""},{"path":"https://mikmart.github.io/monad/reference/monad-laws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monad Laws — monad-laws","text":"pure function wrap value monad. h, g Monadic functions. Functions return monadic objects. object. m monadic object.","code":""},{"path":"https://mikmart.github.io/monad/reference/monad-laws.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monad Laws — monad-laws","text":"Haskell monad laws can translated R follows: Left identity: pure() %>-% h equal h(). Right identity: m %>-% pure equal m. Associativity: (m %>-% g) %>-% h equal m %>-% \\(x) g(x) %>-% h.","code":""},{"path":"https://mikmart.github.io/monad/reference/monad-laws.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monad Laws — monad-laws","text":"https://wiki.haskell.org/Monad_laws","code":""},{"path":[]},{"path":"https://mikmart.github.io/monad/reference/monad-package.html","id":null,"dir":"Reference","previous_headings":"","what":"monad: Operators and Generics for Monads — monad-package","title":"monad: Operators and Generics for Monads — monad-package","text":"Compose generic monadic function pipelines ","code":""},{"path":[]},{"path":"https://mikmart.github.io/monad/reference/monad-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"monad: Operators and Generics for Monads — monad-package","text":"Maintainer: Mikko Marttila mikkmart@protonmail.com","code":""},{"path":"https://mikmart.github.io/monad/reference/monad.html","id":null,"dir":"Reference","previous_headings":"","what":"Monad Operators and Generics — monad","title":"Monad Operators and Generics — monad","text":"Classes implementing methods S7 generics called monads. fmap() implemented functor laws hold. bind() join() implemented monad laws hold. %>>% fmap() pipe operator, %>-% bind() pipe operator. Operator usage form m %>>% f(...).","code":""},{"path":"https://mikmart.github.io/monad/reference/monad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monad Operators and Generics — monad","text":"","code":"lhs %>>% rhs  lhs %>-% rhs  fmap(m, f, ...)  bind(m, f, ...)  join(m)"},{"path":"https://mikmart.github.io/monad/reference/monad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monad Operators and Generics — monad","text":"m, lhs monadic object. f, rhs function. bind(), return monadic object. ... Additional arguments passed f.","code":""},{"path":"https://mikmart.github.io/monad/reference/monad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monad Operators and Generics — monad","text":"monadic object.","code":""},{"path":"https://mikmart.github.io/monad/reference/monad.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monad Operators and Generics — monad","text":"Monads containers values. fmap() transforms contained value function. bind() transforms contained value function returns monadic object. join() takes monad whose contained value another monad, combines new monadic object. used unwrap layer monadic structure. Implementing classes typically embed form control flow state management bind() join(). default implementation join() provide bind(), default implementation bind() provide join() fmap(). performance reasons may wish implement regardless.","code":""},{"path":"https://mikmart.github.io/monad/reference/monad.html","id":"operators","dir":"Reference","previous_headings":"","what":"Operators","title":"Monad Operators and Generics — monad","text":"pipe operators expect monadic object lhs function call expression rhs. call rhs treated partial application function f. pipe expression transformed call corresponding monad generic call arguments rhs passed additional arguments f generic. example, m %>>% f(x) equivalent fmap(m, f, x) m %>-% f(x) equivalent bind(m, f, x).","code":""},{"path":"https://mikmart.github.io/monad/reference/monad.html","id":"trivia","dir":"Reference","previous_headings":"","what":"Trivia","title":"Monad Operators and Generics — monad","text":"class implements fmap() called functor.","code":""},{"path":[]},{"path":"https://mikmart.github.io/monad/reference/monad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monad Operators and Generics — monad","text":"","code":"# We demonstrate by implementing a simple Either monad. library(S7)  # Start by defining constructors of the Left and Right variants. Conventionally # a Right variant signifies success and Left an error condition with a context. left <- function(x) structure(list(value = x), class = c(\"left\", \"either\")) right <- function(x) structure(list(value = x), class = c(\"right\", \"either\"))  # Implement fmap() and bind() methods to gain access to monad operators. class_either <- new_S3_class(\"either\")  method(fmap, class_either) <- function(m, f, ...) {   if (inherits(m, \"left\")) m else right(f(m$value)) }  method(bind, class_either) <- function(m, f, ...) {   if (inherits(m, \"left\")) m else f(m$value) }  # Use with your function that handles errors by returning a monadic value. mlog <- function(x) {   if (x > 0) right(log(x)) else left(\"`x` must be strictly positive.\") }  # fmap() modifies the contained value with a regular function. mlog(2) %>>% \\(x) x + 1 #> $value #> [1] 1.693147 #>  #> attr(,\"class\") #> [1] \"right\"  \"either\" mlog(0) %>>% \\(x) x + 1 #> $value #> [1] \"`x` must be strictly positive.\" #>  #> attr(,\"class\") #> [1] \"left\"   \"either\"  # bind() modifies the contained value with a function that returns an Either. mlog(2) %>-% mlog() #> $value #> [1] -0.3665129 #>  #> attr(,\"class\") #> [1] \"right\"  \"either\" mlog(0) %>-% mlog() #> $value #> [1] \"`x` must be strictly positive.\" #>  #> attr(,\"class\") #> [1] \"left\"   \"either\""},{"path":"https://mikmart.github.io/monad/news/index.html","id":"monad-011","dir":"Changelog","previous_headings":"","what":"monad 0.1.1","title":"monad 0.1.1","text":"CRAN release: 2024-10-28 Initial CRAN submission.","code":""}]
